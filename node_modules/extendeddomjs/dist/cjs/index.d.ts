declare class ExtendedDOMJS {
    private element;
    private elementList;
    private eventListenerList;
    constructor(elements: HTMLElement[]);
    static isString(value: any): value is string;
    static isValid(value: any): boolean;
    static isObject(value: any): value is Record<string, any>;
    static mapObject(obj: Record<string, any>, func: (key: string, value: any) => void): void;
    mapElements(func?: (el: HTMLElement) => any): any[];
    forEachElement(func?: (el: HTMLElement) => void): this;
    everyElement(func: (el: HTMLElement) => boolean): boolean;
    filterElements(func?: (el: HTMLElement, i: number) => boolean): ExtendedDOMJS;
    forEach(func?: (el: ExtendedDOMJS, index: number) => void): this;
    map(func?: (el: ExtendedDOMJS, index: number) => any): any[];
    filter(func?: (el: ExtendedDOMJS, index: number) => boolean): HTMLElement[];
    get el(): HTMLElement | null;
    get els(): HTMLElement[];
    get attri(): NamedNodeMap | undefined;
    get style(): CSSStyleDeclaration | undefined;
    get HTML(): string;
    get Text(): string;
    get classes(): DOMTokenList | undefined;
    get length(): number;
    get isChecked(): boolean | undefined;
    set HTML(value: string);
    setEls(elements: HTMLElement[]): this;
    select(...index: number[]): ExtendedDOMJS;
    addClass(...className: string[]): this;
    removeClass(...classToRemove: string[]): this;
    on(type: string | Record<string, EventListenerOrEventListenerObject>, func?: EventListenerOrEventListenerObject): this;
    off(type: string | Record<string, EventListenerOrEventListenerObject>, func?: EventListenerOrEventListenerObject): this;
    appendTo(to: ExtendedDOMJS): this;
    html(value?: string): string[] | this;
    attr(attrName: string | Record<string, any>, value?: any): any[] | this;
    prop(prop: string | Record<string, any>, value?: any): any[] | this;
    remove(): this;
    removeLastChild(): this;
    isInViewport(): boolean;
}
declare function $(...queries: string[]): ExtendedDOMJS;
declare function $$(tagName: string, to?: ExtendedDOMJS): ExtendedDOMJS;
export { ExtendedDOMJS, $, $$ };
